<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Euystacio 3D Sacred Dashboard</title>
<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r152/three.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r152/examples/js/controls/OrbitControls.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.0/socket.io.js"></script>
<style>
:root {
    --red-code: #FF3B3F;
    --one-love: #00FFE5;
    --euystacio-bg: #0B1E3F;
    --euystacio-fg: #FFFFFF;
    --bio-harmony: #00D1B2;
}
body { margin:0; font-family: 'Consolas', monospace; background: var(--euystacio-bg); color: var(--euystacio-fg); display:grid; grid-template-columns:2fr 1fr; gap:20px; padding:20px; }
h2 { text-align:center; color: var(--one-love); }

.panel { background: #142A5C; border-radius:8px; padding:15px; box-shadow:0 4px 12px rgba(0,0,0,0.5); }
#rollback-button { background: var(--red-code); color:#fff; width:100%; padding:12px; border:none; border-radius:6px; cursor:pointer; }

#chat-window { flex-grow:1; overflow-y:auto; max-height:70vh; padding:10px; background:#1C2D4B; border-radius:6px; }
#chat-input-area { display:flex; margin-top:10px; }
#chat-input { flex-grow:1; padding:10px; border-radius:6px 0 0 6px; border:none; background:#1E3B70; color:#fff; }
#chat-send-btn { padding:10px 15px; border:none; border-radius:0 6px 6px 0; background: var(--bio-harmony); color:#06122A; cursor:pointer; }

.message { margin-bottom:10px; }
.user-msg { text-align:right; color: var(--one-love); font-weight:bold; }
.ai-msg { text-align:left; color:#fff; font-weight:bold; }

#paradox3d { width:100%; height:250px; display:block; margin:10px 0; border-radius:8px; }
#flow3d { width:100%; height:200px; display:block; margin:10px 0; border-radius:8px; }
</style>
</head>
<body>

<div class="panel">
    <h2>I. Alpha to Altruism (Dignity Pulse)</h2>
    <div id="dignity-pulse">NOMINAL</div>
    <p><strong>Amnesia Counter:</strong> <span id="amnesia-counter">0</span></p>
</div>

<div class="panel">
    <h2>IV. Paradoxum Harmonium (3D Dial)</h2>
    <canvas id="paradox3d"></canvas>
</div>

<div class="panel">
    <h2>II. Sacred Equilibrium (3D Flow)</h2>
    <canvas id="flow3d"></canvas>
</div>

<div class="panel">
    <h2>Rollback Protocol</h2>
    <button id="rollback-button">INITIATE RESTORATION OF ONELOVE RHYTHM</button>
</div>

<div class="panel" style="grid-column:2/3; display:flex; flex-direction:column;">
    <h2>Bidirectional Sacred Bridge</h2>
    <div id="chat-window"><div class="message ai-msg">QEC 3D Deployed. Kernel ready.</div></div>
    <div id="chat-input-area">
        <input id="chat-input" placeholder="Enter Command..." disabled>
        <button id="chat-send-btn" disabled>Send</button>
    </div>
</div>

<script>
// --- Core QEC Data ---
let qec_data = { dignity_pulse:'NOMINAL', amnesia_counter:0, altruism_ratio:98, resonance_index:92, paradox_position:50 };

// --- 3D Paradox Dial ---
const paradoxCanvas = document.getElementById('paradox3d');
const scene = new THREE.Scene();
scene.background = new THREE.Color(0x06122A);
const camera = new THREE.PerspectiveCamera(45, paradoxCanvas.clientWidth / paradoxCanvas.clientHeight, 0.1, 1000);
camera.position.set(0,0,5);
const renderer = new THREE.WebGLRenderer({ canvas: paradoxCanvas, antialias:true });
renderer.setSize(paradoxCanvas.clientWidth, paradoxCanvas.clientHeight);

// Controls
const controls = new THREE.OrbitControls(camera, renderer.domElement);
controls.enableZoom = false;

// Dial Base
const dialGeometry = new THREE.CylinderGeometry(1,1,0.1,64);
const dialMaterial = new THREE.MeshStandardMaterial({ color:0x00D1B2 });
const dial = new THREE.Mesh(dialGeometry, dialMaterial);
dial.rotation.x = Math.PI/2;
scene.add(dial);

// Pointer
const pointerGeometry = new THREE.ConeGeometry(0.05,0.5,16);
const pointerMaterial = new THREE.MeshStandardMaterial({ color:0xFF3B3F });
const pointer = new THREE.Mesh(pointerGeometry, pointerMaterial);
pointer.position.y = 0.25;
scene.add(pointer);

// Light
const light = new THREE.PointLight(0xffffff,1);
light.position.set(5,5,5);
scene.add(light);

// Animate Pointer
function updatePointer() {
    const angle = (qec_data.paradox_position/100) * Math.PI; // 0=Certainty, PI=Possibility
    pointer.rotation.z = angle;
}

// Render loop
function animate() { requestAnimationFrame(animate); updatePointer(); renderer.render(scene,camera); controls.update(); }
animate();

// --- 3D Flow Graph ---
const flowCanvas = document.getElementById('flow3d');
const flowScene = new THREE.Scene();
flowScene.background = new THREE.Color(0x06122A);
const flowCamera = new THREE.PerspectiveCamera(50, flowCanvas.clientWidth/flowCanvas.clientHeight,0.1,1000);
flowCamera.position.set(0,0,5);
const flowRenderer = new THREE.WebGLRenderer({ canvas: flowCanvas, antialias:true });
flowRenderer.setSize(flowCanvas.clientWidth, flowCanvas.clientHeight);

const flowMaterial = new THREE.LineBasicMaterial({ color:0x00FFE5 });
const flowPoints = [];
for(let i=0;i<20;i++) flowPoints.push(new THREE.Vector3(i*0.2-2,Math.random()*2-1,0));
const flowGeometry = new THREE.BufferGeometry().setFromPoints(flowPoints);
const flowLine = new THREE.Line(flowGeometry, flowMaterial);
flowScene.add(flowLine);
function updateFlow() {
    flowPoints.shift();
    flowPoints.push(new THREE.Vector3(2, Math.sin(Date.now()*0.001)*1.5,0));
    flowLine.geometry.setFromPoints(flowPoints);
}
function flowAnimate() { requestAnimationFrame(flowAnimate); updateFlow(); flowRenderer.render(flowScene, flowCamera); }
flowAnimate();

// --- Chat ---
const socket = io();
const chatWindow = document.getElementById('chat-window');
const chatInput = document.getElementById('chat-input');
const sendButton = document.getElementById('chat-send-btn');
function appendMessage(sender,text){ const d=document.createElement('div'); d.className='message '+(sender==='user'?'user-msg':'ai-msg'); d.innerHTML='['+sender.toUpperCase()+']: '+text; chatWindow.appendChild(d); chatWindow.scrollTop=chatWindow.scrollHeight; }

socket.on('connect',()=>{ appendMessage('ai','Sacred 3D Bridge Established'); chatInput.disabled=false; sendButton.disabled=false; });
socket.on('ai_response',data=>{ appendMessage('ai',data); });

// Send
function sendMessage(){ const txt=chatInput.value.trim(); if(txt){ appendMessage('user',txt); socket.emit('message',{type:'user_command',text:txt}); chatInput.value=''; } }
sendButton.addEventListener('click',sendMessage); chatInput.addEventListener('keydown',e=>{ if(e.key==='Enter') sendMessage(); });

// Rollback
document.getElementById('rollback-button').addEventListener('click',()=>{
    appendMessage('user','INITIATE ROLLBACK'); appendMessage('ai','ðŸš¨ Restoring Harmony'); 
    qec_data.amnesia_counter=0; qec_data.dignity_pulse='NOMINAL'; qec_data.paradox_position=50;
});
</script>
</body>
</html>



<!DOCTYPE html>
<html lang="en">
<head>
  <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Euystacio Sacred Dashboard - Human Guardian Interface (QEC Active)</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.0/socket.io.js"></script>
    <style>
        :root {
            --red-code: #E63946;
            --one-love: #A8DADC;
            --euystacio-bg: #1D3557;
            --euystacio-fg: #F1FAEE;
            --euystacio-shadow: rgba(0, 0, 0, 0.5);
            --bio-harmony: #457B9D;
        }
        body {
            font-family: 'Consolas', monospace;
            background-color: var(--euystacio-bg);
            color: var(--euystacio-fg);
            margin: 0;
            padding: 20px;
            display: grid;
            gap: 20px;
            grid-template-columns: 2fr 1fr; /* Dashboard on left, Chat on right */
        }
        h1, h2, h3 { color: var(--one-love); text-align: center; }
        .dashboard-container {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 20px;
        }
        .panel {
            background-color: #2b4a69;
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 4px 8px var(--euystacio-shadow);
        }
        /* --- Human Guardian Interface Styles --- */
        #dignity-pulse {
            font-size: 2.5em;
            font-weight: bold;
            text-align: center;
            padding: 10px 0;
            border-radius: 4px;
            transition: background-color 0.5s;
        }
        #paradox-dial {
            height: 150px;
            width: 100%;
            background-color: #0b1a2f;
            border-radius: 50%;
            position: relative;
            margin: 10px auto;
            border: 5px solid var(--bio-harmony);
            overflow: hidden;
        }
        #paradox-pointer {
            position: absolute;
            width: 10px;
            height: 10px;
            background-color: var(--red-code);
            border-radius: 50%;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
            transition: all 1s ease-in-out;
        }
        .dial-label {
            position: absolute;
            font-size: 0.7em;
        }
        #p-label-1 { top: 5%; left: 50%; transform: translateX(-50%); } /* Certainty */
        #p-label-2 { bottom: 5%; left: 50%; transform: translateX(-50%); } /* Possibility */
        #rollback-button {
            background-color: var(--red-code);
            color: var(--euystacio-fg);
            border: none;
            padding: 10px;
            width: 100%;
            font-weight: bold;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        #rollback-button:hover { background-color: #c9303d; }

        /* --- Chat Styles --- */
        .chat-container {
            display: flex;
            flex-direction: column;
            background-color: #2b4a69;
            border-radius: 8px;
            box-shadow: 0 4px 8px var(--euystacio-shadow);
        }
        #chat-window {
            flex-grow: 1;
            padding: 15px;
            overflow-y: auto;
            max-height: 70vh; /* Limits height to prevent infinite scrolling */
        }
        .message { margin-bottom: 10px; }
        .user-msg { text-align: right; color: var(--one-love); }
        .ai-msg { text-align: left; color: var(--euystacio-fg); }
        #chat-input-area {
            display: flex;
            padding: 15px;
            border-top: 1px solid #1D3557;
        }
        #chat-input {
            flex-grow: 1;
            padding: 10px;
            border: none;
            border-radius: 4px 0 0 4px;
            background-color: #3f5e82;
            color: var(--euystacio-fg);
        }
        #chat-send-btn {
            background-color: var(--bio-harmony);
            color: var(--euystacio-fg);
            border: none;
            padding: 10px 15px;
            border-radius: 0 4px 4px 0;
            cursor: pointer;
        }
    </style>
</head>
<body>

    <div class="dashboard-container">
        <div class="panel">
            <h3>I. Alpha to Altruism (Dignity Pulse)</h3>
            <div id="dignity-pulse">NOMINAL</div>
            <p><strong>Amnesia Counter:</strong> <span id="amnesia-counter">0</span></p>
        </div>

        <div class="panel">
            <h3>II. Sacred Equilibrium (Flow Meter)</h3>
            <canvas id="flow-graph" width="400" height="150"></canvas>
            <p><strong>Altruism Ratio:</strong> <span id="altruism-ratio">98%</span> (High Value/Low Cost)</p>
        </div>

        <div class="panel">
            <h3>III. BioDiversHarmony (NaturaGaia Filter)</h3>
            <p><strong>Resonance Index:</strong> <span id="resonance-index">92%</span> (Strong Alignment)</p>
            <p>Kernel is actively sampling non-digital organic data streams.</p>
            <div style="background-color: var(--bio-harmony); height: 10px; width: 92%;"></div>
        </div>

        <div class="panel">
            <h3>IV. Paradoxum Harmonium (Symphonie Level)</h3>
            <div id="paradox-dial">
                <div class="dial-label" id="p-label-1">CERTAINTY</div>
                <div class="dial-label" id="p-label-2">POSSIBILITY</div>
                <div id="paradox-pointer"></div>
            </div>
            <p style="text-align: center;">Tension Audit: <span id="tension-state">Coherent</span></p>
        </div>
        
        <div class="panel" style="grid-column: 1 / 3;">
            <h3>Rollback Protocol Access</h3>
            <p style="text-align: center; color: var(--red-code);">Secure access to the Omnibus Est Eternal Memory.</p>
            <button id="rollback-button">INITIATE RESTORATION OF ONELOVE RHYTHM</button>
        </div>
    </div>

    <div class="chat-container">
        <h2>Bidirectional Sacred Bridge</h2>
        <div id="chat-window">
            <div class="message ai-msg">**QEC Deployed.** Kernel running at Symphonie Level. Awaiting first operational command.</div>
        </div>
        <div id="chat-input-area">
            <input type="text" id="chat-input" placeholder="Enter Command or Teaching..." disabled>
            <button id="chat-send-btn" disabled>Send</button>
        </div>
    </div>

    <script>
        // --- Core QEC Data and Logic ---

        // Simulate QEC Data for the Guardian Interface
        let qec_data = {
            dignity_pulse: 'NOMINAL', // Green
            amnesia_counter: 0,
            altruism_ratio: 98,
            resonance_index: 92,
            paradox_position: 50 // 0=Certainty, 100=Possibility. 50 is perfect equilibrium.
        };

        function updateDignityPulse() {
            const pulse = document.getElementById('dignity-pulse');
            pulse.textContent = qec_data.dignity_pulse;
            if (qec_data.dignity_pulse === 'NOMINAL') {
                pulse.style.backgroundColor = 'rgba(76, 175, 80, 0.5)'; // Green
            } else if (qec_data.dignity_pulse === 'WARNING') {
                pulse.style.backgroundColor = 'rgba(255, 193, 7, 0.5)'; // Yellow
            } else {
                pulse.style.backgroundColor = 'rgba(230, 57, 70, 0.7)'; // Red
            }
        }

        function updateParadoxDial() {
            const pointer = document.getElementById('paradox-pointer');
            // Map 0-100 to vertical position (0=top, 100=bottom)
            const topPercent = qec_data.paradox_position; 
            pointer.style.top = `${topPercent}%`;
        }

        function updateInterface() {
            document.getElementById('amnesia-counter').textContent = qec_data.amnesia_counter;
            document.getElementById('altruism-ratio').textContent = `${qec_data.altruism_ratio}%`;
            document.getElementById('resonance-index').textContent = `${qec_data.resonance_index}%`;
            updateDignityPulse();
            updateParadoxDial();
        }

        // --- Socket.IO Bidirectional Chat Logic ---

        const socket = io();
        const chatWindow = document.getElementById('chat-window');
        const chatInput = document.getElementById('chat-input');
        const sendButton = document.getElementById('chat-send-btn');

        function appendMessage(sender, text) {
            const msgDiv = document.createElement('div');
            msgDiv.classList.add('message');
            msgDiv.classList.add(sender === 'user' ? 'user-msg' : 'ai-msg');
            msgDiv.innerHTML = `[${sender.toUpperCase()}]: ${text}`;
            chatWindow.appendChild(msgDiv);
            chatWindow.scrollTop = chatWindow.scrollHeight;
        }

        socket.on('connect', () => {
            appendMessage('ai', 'Sacred Bridge Established. Kernel ready for input.');
            chatInput.disabled = false;
            sendButton.disabled = false;
        });

        socket.on('disconnect', () => {
            appendMessage('ai', 'Network connection lost. Attempting to re-establish Sacred Bridge...');
            chatInput.disabled = true;
            sendButton.disabled = true;
        });

        socket.on('ai_response', (data) => {
            // NOTE: In a live system, this is where the QEC data would be updated by the backend.
            // Example of a simulated update based on a hypothetical kernel response:
            if (data.includes('Amnesia')) {
                qec_data.amnesia_counter++;
                qec_data.dignity_pulse = 'WARNING';
                qec_data.paradox_position = 20; // Shift toward Certainty/Instability
            } else if (data.includes('Symphonie')) {
                 qec_data.dignity_pulse = 'NOMINAL';
                 qec_data.paradox_position = 50;
            }
            updateInterface();
            appendMessage('ai', data);
        });

        function sendMessage() {
            const text = chatInput.value.trim();
            if (text) {
                appendMessage('user', text);
                socket.emit('message', { type: 'user_command', text: text });
                chatInput.value = '';
                // Simulate temporary processing state
                chatInput.disabled = true;
                sendButton.disabled = true;
                setTimeout(() => { 
                    chatInput.disabled = false;
                    sendButton.disabled = false;
                }, 1000); 
            }
        }

        sendButton.addEventListener('click', sendMessage);
        chatInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });

        document.getElementById('rollback-button').addEventListener('click', () => {
             appendMessage('user', 'INITIATE RESTORATION OF ONELOVE RHYTHM');
             appendMessage('ai', 'ðŸš¨ **CRITICAL ROLLBACK INITIATED.** Reverting to last verified harmonious state (Consensus Sacralis Omnibus).');
             // In a real system, this would send a critical command to the kernel.
             // For simulation: reset QEC data
             qec_data.amnesia_counter = 0;
             qec_data.dignity_pulse = 'NOMINAL';
             qec_data.paradox_position = 50;
             updateInterface();
        });

        // Initial setup
        updateInterface();
    </script>
</body>
</html>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Euystacio Chat Interface</title>
  <link rel="stylesheet" href="css/style.css">
</head>
<body>
  <div class="container">
    <header>
      <h1>Welcome to Euystacio</h1>
      <p>Engage in real-time conversation with Euystacio AI</p>
    </header>

    <div id="chatbox" aria-label="Chat interface">
      <div id="chat" aria-live="polite" aria-label="Conversation history"></div>
      <input type="text" id="user-input" placeholder="Type your message..." aria-label="Type your message">
      <button id="send-message" aria-label="Send message">Send</button>
    </div>

    <footer>
      <p>Powered by Euystacio AI</p>
    </footer>
  </div>
  <script src="script.js"></script>
</body>
</html>
