<!DOCTYPE html>
<html lang="en">
<head>

    <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Euystacio Live Dashboard (The Compass)</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@100..900&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            background-color: #0d0a13; /* Deep Space Black */
            color: #e0e7ff;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            padding: 0;
            margin: 0;
        }
        .card {
            background-color: #1a1723; /* Darker card background */
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4);
            border: 1px solid #3f3e5e;
        }
        canvas {
            display: block;
            width: 100%;
            height: 100%;
            border-radius: 12px;
            margin: 0 auto;
        }
        .matl-pulse {
            animation: pulse-red 1s infinite alternate;
        }
        @keyframes pulse-red {
            from { box-shadow: 0 0 5px #f87171; }
            to { box-shadow: 0 0 15px #dc2626; }
        }
        .purchase-pulse {
            animation: pulse-teal 0.5s ease-out;
        }
        @keyframes pulse-teal {
            0% { transform: scale(1); opacity: 1; box-shadow: 0 0 0 rgba(20, 184, 166, 0.7); }
            50% { transform: scale(1.05); opacity: 0.8; box-shadow: 0 0 20px rgba(20, 184, 166, 1); }
            100% { transform: scale(1); opacity: 1; box-shadow: 0 0 0 rgba(20, 184, 166, 0); }
        }
        .lockout-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(220, 38, 38, 0.85); /* Red Overlay */
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            font-weight: bold;
            color: white;
            text-shadow: 0 0 5px black;
            z-index: 10;
            pointer-events: none;
        }
        .dao-vote-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(79, 70, 229, 0.4);
        }
    </style>
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, doc, getDoc, addDoc, setDoc, updateDoc, onSnapshot, collection, query, where, getDocs, orderBy, limit, serverTimestamp, setLogLevel } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // --- GLOBAL FIREBASE/ENV SETUP ---
        // MANDATORY: Environment variables are provided by the canvas.
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

        let app, db, auth;
        let userId = null;
        let isAuthReady = false;

        setLogLevel('Debug'); // Enable Firestore logging

        // --- 3D SCENE VARIABLES ---
        let scene, camera, renderer, raycaster, mouse, controls;
        let altTowerGroup, altTowerMeshes = [];
        const towerData = [
            { id: 1, height: 50, color: 0x0C3E52, name: "Tranche 1: Exterior Hull", impact: 120000, matl: 3.5, tc: 99.1 },
            { id: 2, height: 80, color: 0x0A5C6F, name: "Tranche 2: Life Support Systems", impact: 250000, matl: 5.2, tc: 98.6 },
            { id: 3, height: 120, color: 0x087A8E, name: "Tranche 3: Sentinel AI Core", impact: 450000, matl: 6.8, tc: 99.9 },
            { id: 4, height: 30, color: 0x05999E, name: "Tranche 4: Final Deployment", impact: 50000, matl: 2.1, tc: 99.5 }
        ];

        // --- APP STATE VARIABLES ---
        let matl = 6.8; // Initial Material Toxicity Level
        let matlThreshold = 10.0; // The unchangeable ethical invariant

        // --- FIREBASE INITIALIZATION & AUTHENTICATION ---
        window.onload = async () => {
            const dashboardContainer = document.getElementById('dashboard-container');
            const authContainer = document.getElementById('auth-container');
            const loadingText = document.getElementById('loading-text');

            if (!firebaseConfig || Object.keys(firebaseConfig).length === 0) {
                loadingText.textContent = "Error: Firebase configuration is missing. Cannot proceed with authentication.";
                return;
            }

            try {
                app = initializeApp(firebaseConfig);
                db = getFirestore(app);
                auth = getAuth(app);

                // --- Initial Sign-in ---
                if (initialAuthToken) {
                    await signInWithCustomToken(auth, initialAuthToken);
                    console.log("Signed in with custom token.");
                } else {
                    // Fallback to anonymous sign-in if no custom token is provided
                    await signInAnonymously(auth);
                    console.log("Signed in anonymously.");
                }

                // --- Auth State Change Listener ---
                onAuthStateChanged(auth, (user) => {
                    if (user) {
                        userId = user.uid;
                        console.log("User ID:", userId);
                        isAuthReady = true;
                        
                        // Hide Auth UI, show Dashboard
                        authContainer.classList.add('hidden');
                        dashboardContainer.classList.remove('hidden');
                        
                        document.getElementById('user-id-display').textContent = userId;
                        document.getElementById('user-email-display').textContent = user.email || 'Anonymous Pioneer';

                        // Initialize App functions dependent on User ID
                        init3DScene();
                        initAppListeners();

                    } else {
                        userId = null;
                        isAuthReady = true;
                        
                        // Show Auth UI, hide Dashboard
                        dashboardContainer.classList.add('hidden');
                        authContainer.classList.remove('hidden');
                        loadingText.textContent = '';
                        document.getElementById('loading-spinner').classList.add('hidden');
                        
                        // Handle anonymous user transition
                        if (user && user.isAnonymous) {
                            console.log("Anonymous user detected. Displaying registration.");
                        } else {
                            console.log("No user signed in. Displaying login/registration.");
                        }
                    }
                    updateMATLDisplay();
                });

            } catch (error) {
                console.error("Firebase Initialization/Auth Error:", error);
                loadingText.textContent = `CRITICAL FAILURE: Firebase Error. Check console.`;
            }
        };

        // --- UI FUNCTIONS ---
        window.toggleAuthMode = (isRegister) => {
            document.getElementById('auth-title').textContent = isRegister ? 'Pioneer Registration' : 'Pioneer Login';
            document.getElementById('auth-submit').textContent = isRegister ? 'Register & Sign In' : 'Sign In';
            document.getElementById('auth-toggle-link').textContent = isRegister ? 'Already have an account? Sign In' : 'New Pioneer? Register';
            document.getElementById('auth-form').dataset.mode = isRegister ? 'register' : 'login';
        };

        window.handleAuthSubmit = async (event) => {
            event.preventDefault();
            const form = event.target;
            const mode = form.dataset.mode;
            const email = form.email.value;
            const password = form.password.value;
            const authError = document.getElementById('auth-error');
            authError.textContent = '';

            try {
                if (mode === 'register') {
                    await createUserWithEmailAndPassword(auth, email, password);
                } else {
                    await signInWithEmailAndPassword(auth, email, password);
                }
                // Auth listener handles the UI transition on successful sign-in
            } catch (error) {
                console.error("Authentication Error:", error);
                authError.textContent = `Auth Failed: ${error.message}`;
            }
        };

        window.handleSignOut = async () => {
            try {
                await signOut(auth);
                // Optionally sign in anonymously immediately after sign out for continuity
                await signInAnonymously(auth);
            } catch (error) {
                console.error("Sign Out Error:", error);
            }
        };


        // --- FIREBASE LISTENERS & DATA FETCHING ---
        function initAppListeners() {
            if (!db || !userId) return;

            // 1. Pioneer Profile Listener (Private Data)
            const profileRef = doc(db, `artifacts/${appId}/users/${userId}/profile`, 'data');
            onSnapshot(profileRef, (docSnap) => {
                const profileData = docSnap.exists() ? docSnap.data() : { totalKarmaBonds: 0, totalImpact: 0 };
                document.getElementById('total-karmabonds').textContent = profileData.totalKarmaBonds.toLocaleString() || '0';
                document.getElementById('personal-impact').textContent = `${(profileData.totalImpact || 0).toLocaleString()} m³`;
            }, (error) => console.error("Profile Snapshot Error:", error));

            // 2. Altruism Ledger Listener (Private Data)
            const ledgerQ = query(collection(db, `artifacts/${appId}/users/${userId}/transactions`), orderBy('timestamp', 'desc'), limit(5));
            onSnapshot(ledgerQ, (snapshot) => {
                const ledgerList = document.getElementById('altruism-ledger-list');
                ledgerList.innerHTML = '';
                snapshot.forEach((doc) => {
                    const tx = doc.data();
                    const date = tx.timestamp ? new Date(tx.timestamp.toDate()).toLocaleDateString() : 'N/A';
                    const listItem = document.createElement('li');
                    listItem.className = 'py-2 border-b border-gray-700 flex justify-between text-sm';
                    listItem.innerHTML = `
                        <span>$${tx.amount.toLocaleString()} in Tranche ${tx.tranche}</span>
                        <span class="text-teal-400">${tx.impact.toLocaleString()} m³ | ${date}</span>
                    `;
                    ledgerList.appendChild(listItem);
                });
                if (snapshot.empty) {
                     ledgerList.innerHTML = '<li class="text-center py-4 text-gray-400">No KarmaBonds purchased yet.</li>';
                }
            }, (error) => console.error("Ledger Snapshot Error:", error));

            // 3. DAO Governance Listener (Public Data)
            const daoQ = query(collection(db, `artifacts/${appId}/public/data/dao_proposals`), orderBy('timestamp', 'desc'));
            onSnapshot(daoQ, (snapshot) => {
                const daoList = document.getElementById('dao-proposal-list');
                daoList.innerHTML = '';
                snapshot.forEach((doc) => {
                    const proposal = doc.data();
                    const totalVotes = (proposal.votesFor || 0) + (proposal.votesAgainst || 0);
                    const forPercent = totalVotes > 0 ? Math.round((proposal.votesFor / totalVotes) * 100) : 0;
                    const voted = proposal.voters && proposal.voters[userId];
                    
                    const proposalItem = document.createElement('div');
                    proposalItem.className = 'card p-4 mb-4';
                    proposalItem.innerHTML = `
                        <p class="font-bold text-teal-400">${proposal.title}</p>
                        <p class="text-xs text-gray-400 mb-2">Threshold Change: ${proposal.description}</p>
                        <div class="w-full bg-gray-700 rounded-full h-2.5 mb-2">
                            <div class="bg-teal-500 h-2.5 rounded-full" style="width: ${forPercent}%"></div>
                        </div>
                        <p class="text-xs text-gray-400 mb-3">${proposal.votesFor} For (${forPercent}%) / ${proposal.votesAgainst} Against</p>
                        <div class="flex space-x-2">
                            <button onclick="handleDaoVote('${doc.id}', true)" ${voted ? 'disabled' : ''} class="dao-vote-btn px-3 py-1 text-sm rounded-full ${voted ? 'bg-gray-600 text-gray-400' : 'bg-teal-500 hover:bg-teal-400'} transition duration-200">
                                Vote FOR
                            </button>
                            <button onclick="handleDaoVote('${doc.id}', false)" ${voted ? 'disabled' : ''} class="dao-vote-btn px-3 py-1 text-sm rounded-full ${voted ? 'bg-gray-600 text-gray-400' : 'bg-red-500 hover:bg-red-400'} transition duration-200">
                                Vote AGAINST
                            </button>
                            ${voted ? '<span class="text-xs text-yellow-400 self-center">Voted!</span>' : ''}
                        </div>
                    `;
                    daoList.appendChild(proposalItem);
                });
                if (snapshot.empty) {
                    daoList.innerHTML = '<p class="text-center text-gray-400 py-4">No active proposals right now.</p>';
                }
            }, (error) => console.error("DAO Snapshot Error:", error));
        }

        // --- DAO VOTING LOGIC (PUBLIC WRITE) ---
        window.handleDaoVote = async (proposalId, voteFor) => {
            if (!db || !userId) {
                console.error("Database not ready or user not logged in.");
                return;
            }
            const proposalRef = doc(db, `artifacts/${appId}/public/data/dao_proposals`, proposalId);
            
            try {
                // Use arrayUnion/increment for secure, atomic update
                await updateDoc(proposalRef, {
                    [voteFor ? 'votesFor' : 'votesAgainst']: (proposalRef.__voteCount || 0) + 1, // Simplified increment, better done with Firestore field value
                    voters: { [userId]: true },
                    // In a real app, use Firestore's FieldValue.increment and security rules to prevent double voting.
                });
                console.log(`Vote cast for proposal ${proposalId}. Voted For: ${voteFor}`);
            } catch (error) {
                console.error("Error casting vote:", error);
                // Fallback for the simple structure used here
                const proposalSnap = await getDoc(proposalRef);
                if (proposalSnap.exists() && proposalSnap.data().voters && proposalSnap.data().voters[userId]) {
                     console.log("Already voted on this proposal.");
                } else {
                    // Update: using a simple client-side increment for demonstration, which is not atomic/secure in production.
                    await updateDoc(proposalRef, {
                        [voteFor ? 'votesFor' : 'votesAgainst']: proposalSnap.data()[voteFor ? 'votesFor' : 'votesAgainst'] + 1,
                        [`voters.${userId}`]: true
                    });
                }
            }
        };
        
        // --- TRANCHE MOCK DATA & ETHICS CHECK ---
        const tranches = [
            { id: 1, name: "Exterior Hull Purchase", status: "RELEASED", proofs: ["GPS Confirmation", "MATL Test"], amount: 150000 },
            { id: 2, name: "Life Support Systems", status: "RELEASED", proofs: ["MATL Test", "TC Integrity"], amount: 250000 },
            { id: 3, name: "Sentinel AI Core", status: "PENDING", proofs: ["GPS Confirmation", "MATL Test", "TC Integrity"], amount: 400000 }
        ];

        window.checkEthicalStatus = () => {
            const matlElement = document.getElementById('matl-level');
            const compassElement = document.getElementById('altruism-compass-status');
            const purchaseButton = document.getElementById('purchase-karmabond-btn');
            const lockoutOverlay = document.getElementById('lockout-overlay');

            matlElement.textContent = matl.toFixed(2);
            
            if (matl > matlThreshold) {
                compassElement.innerHTML = 'CRITICAL EROSION!';
                compassElement.className = 'text-red-500 font-bold matl-pulse';
                lockoutOverlay.classList.remove('hidden');
                purchaseButton.disabled = true;
                purchaseButton.textContent = 'SYSTEM LOCKOUT ⚠️';
            } else {
                compassElement.innerHTML = 'HARMONIC (MATL &le; 10%)';
                compassElement.className = 'text-teal-400 font-bold';
                lockoutOverlay.classList.add('hidden');
                purchaseButton.disabled = false;
                purchaseButton.textContent = 'Purchase KarmaBond';
            }
        };

        window.simulateCorruptingVector = () => {
            const initialMatl = matl;
            matl = 12.5; // Force MATL breach
            checkEthicalStatus();

            const button = document.getElementById('simulate-btn');
            button.disabled = true;
            button.textContent = 'Lockout Active... (4s)';

            setTimeout(() => {
                matl = initialMatl; // Reset to safe state
                checkEthicalStatus();
                button.disabled = false;
                button.textContent = 'Simulate Corrupting Vector';
            }, 4000);
        };

        // --- INVESTMENT LOGIC (SECURE WRITE) ---
        window.purchaseKarmaBond = async () => {
            if (!isAuthReady || !userId) {
                alert("Please log in to purchase KarmaBonds.");
                return;
            }
            if (matl > matlThreshold) {
                // Should be prevented by the disabled button, but added for safety
                alert("Transaction blocked: Ethical invariant exceeded.");
                return;
            }

            const amountInput = document.getElementById('purchase-amount');
            const amount = parseFloat(amountInput.value);

            if (isNaN(amount) || amount <= 0) {
                alert("Please enter a valid amount.");
                return;
            }
            
            // Determine impact (simplified: 1 USD = 5 m³ water)
            const impact = amount * 5; 
            const trancheId = 3; // Hardcode to the pending Tranche 3 for simulation

            try {
                // 1. Transaction Record (Ledger)
                const txRef = collection(db, `artifacts/${appId}/users/${userId}/transactions`);
                await addDoc(txRef, {
                    amount: amount,
                    impact: impact,
                    tranche: trancheId,
                    timestamp: serverTimestamp(),
                    status: 'confirmed',
                    matlSnapshot: matl.toFixed(2)
                });

                // 2. Update Pioneer Profile Aggregates
                const profileRef = doc(db, `artifacts/${appId}/users/${userId}/profile`, 'data');
                const profileSnap = await getDoc(profileRef);
                const currentBonds = profileSnap.exists() ? profileSnap.data().totalKarmaBonds : 0;
                const currentImpact = profileSnap.exists() ? profileSnap.data().totalImpact : 0;
                
                await setDoc(profileRef, {
                    totalKarmaBonds: currentBonds + amount,
                    totalImpact: currentImpact + impact
                }, { merge: true });

                // 3. Update 3D Visualization (Dynamic Impact Pulse)
                animateTowerGrowth(trancheId - 1, impact / 1000); // Scale impact for visual height

                // Clear input
                amountInput.value = '';
            } catch (error) {
                console.error("Error processing KarmaBond purchase:", error);
                alert("Failed to process purchase. Check console for details.");
            }
        };

        // --- 3D SCENE SETUP ---
        function init3DScene() {
            const container = document.getElementById('three-scene');
            const width = container.clientWidth;
            const height = container.clientHeight;

            // Scene
            scene = new THREE.Scene();
            scene.background = new THREE.Color(0x0d0a13);

            // Camera (Optimized for mobile viewing)
            camera = new THREE.PerspectiveCamera(50, width / height, 0.1, 1000);
            camera.position.set(0, 100, 200);

            // Renderer
            renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
            renderer.setSize(width, height);
            container.appendChild(renderer.domElement);

            // Lighting
            const ambient = new THREE.AmbientLight(0x404040, 5);
            scene.add(ambient);
            const directionalLight = new THREE.DirectionalLight(0xffffff, 3);
            directionalLight.position.set(100, 200, 100);
            scene.add(directionalLight);

            // Controls (Simple Orbit/Pan for interaction)
            controls = new THREE.OrbitControls(camera, renderer.domElement);
            controls.enableDamping = true;
            controls.dampingFactor = 0.05;
            controls.minDistance = 100;
            controls.maxDistance = 300;
            controls.maxPolarAngle = Math.PI / 2;

            // Raycaster for click/tap detection
            raycaster = new THREE.Raycaster();
            mouse = new THREE.Vector2();

            // Create Tower Group
            altTowerGroup = new THREE.Group();
            scene.add(altTowerGroup);
            createAltruismTowers();

            // Event Listeners
            window.addEventListener('resize', onWindowResize, false);
            container.addEventListener('click', onTowerClick, false);
            container.addEventListener('touchstart', onTowerTouch, false);

            animate();
            checkEthicalStatus(); // Initial status check
        }

        function createAltruismTowers() {
            const spacing = 40;
            altTowerMeshes = [];

            towerData.forEach((data, index) => {
                const geometry = new THREE.CylinderGeometry(15, 15, data.height, 32);
                const material = new THREE.MeshLambertMaterial({ color: data.color, emissive: data.color, emissiveIntensity: 0.1 });
                const tower = new THREE.Mesh(geometry, material);

                // Position calculation
                const x = (index - (towerData.length - 1) / 2) * spacing;
                tower.position.set(x, data.height / 2, 0);
                tower.userData = data; // Store data on the mesh itself

                altTowerGroup.add(tower);
                altTowerMeshes.push(tower);

                // Add base plane for visual grounding
                const baseGeometry = new THREE.CircleGeometry(20, 32);
                const baseMaterial = new THREE.MeshBasicMaterial({ color: data.color, transparent: true, opacity: 0.3 });
                const base = new THREE.Mesh(baseGeometry, baseMaterial);
                base.rotation.x = -Math.PI / 2;
                base.position.set(x, 0, 0);
                altTowerGroup.add(base);
            });
        }

        function onWindowResize() {
            const container = document.getElementById('three-scene');
            camera.aspect = container.clientWidth / container.clientHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(container.clientWidth, container.clientHeight);
        }

        function animate() {
            requestAnimationFrame(animate);
            controls.update();
            renderer.render(scene, camera);
        }

        // --- INTERACTION: RAYCASTING ---
        function setMouseCoordinates(event, rect) {
            // Calculate mouse position in normalized device coordinates (-1 to +1)
            mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;
            mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;
        }

        function onTowerClick(event) {
            const rect = renderer.domElement.getBoundingClientRect();
            setMouseCoordinates(event, rect);
            checkIntersection();
        }

        function onTowerTouch(event) {
            if (event.touches.length > 0) {
                const rect = renderer.domElement.getBoundingClientRect();
                setMouseCoordinates(event.touches[0], rect);
                checkIntersection();
            }
        }

        function checkIntersection() {
            raycaster.setFromCamera(mouse, camera);
            const intersects = raycaster.intersectObjects(altTowerMeshes);

            const tooltip = document.getElementById('tooltip');

            if (intersects.length > 0) {
                const intersected = intersects[0].object;
                const data = intersected.userData;

                // Update tooltip content
                tooltip.innerHTML = `
                    <p class="font-bold text-teal-400">${data.name}</p>
                    <p class="text-xs">Impact: ${data.impact.toLocaleString()} m³ Water</p>
                    <p class="text-xs">MATL Snapshot: ${data.matl.toFixed(2)}%</p>
                    <p class="text-xs">TC Integrity: ${data.tc.toFixed(1)}%</p>
                `;

                // Calculate screen position for tooltip (simple approach)
                const vector = new THREE.Vector3();
                vector.setFromMatrixPosition(intersected.matrixWorld);
                vector.project(camera);

                const width = window.innerWidth;
                const height = window.innerHeight;

                const x = (vector.x * 0.5 + 0.5) * width;
                const y = (-vector.y * 0.5 + 0.5) * height;

                tooltip.style.left = `${x}px`;
                tooltip.style.top = `${y}px`;
                tooltip.classList.remove('hidden');

            } else {
                tooltip.classList.add('hidden');
            }
        }

        // --- DYNAMIC IMPACT PULSE ANIMATION ---
        function animateTowerGrowth(index, deltaHeight) {
            const tower = altTowerMeshes[index];
            const currentHeight = tower.scale.y * towerData[index].height;
            const newHeight = currentHeight + deltaHeight;
            const targetScale = newHeight / towerData[index].height;

            // Simple pulse animation: Scale and change color briefly
            const originalColor = tower.material.color.clone();
            const pulseColor = new THREE.Color(0x14b8a6); // Teal

            // Animate scale (to simulate growth)
            const duration = 200; // ms
            const startTime = Date.now();

            function updateScale() {
                const elapsed = Date.now() - startTime;
                if (elapsed < duration) {
                    const t = elapsed / duration;
                    tower.scale.y = (1 - t) * tower.scale.y + t * targetScale;
                    tower.position.y = tower.geometry.parameters.height * tower.scale.y / 2;
                    requestAnimationFrame(updateScale);
                } else {
                    tower.scale.y = targetScale;
                    tower.position.y = tower.geometry.parameters.height * tower.scale.y / 2;
                }
            }
            updateScale();

            // Pulse color effect
            tower.material.emissive.set(pulseColor);
            setTimeout(() => {
                tower.material.emissive.set(originalColor);
            }, 300);

            // Re-store new height for persistent growth tracking
            towerData[index].height = newHeight;
            towerData[index].impact += deltaHeight * 1000;
        }

    </script>
</head>
<body class="bg-[#0d0a13] text-[#e0e7ff] antialiased">

    <!-- Floating Tooltip for 3D Interaction -->
    <div id="tooltip" class="hidden absolute p-3 card z-20 pointer-events-none transform -translate-x-1/2 -translate-y-full" style="min-width: 200px; margin-top: -10px;">
        <!-- Content will be injected by Three.js on click -->
    </div>

    <!-- MAIN APP STRUCTURE -->
    <main class="flex-grow p-4 md:p-8 w-full max-w-7xl mx-auto">
        
        <!-- HEADER / USER PROFILE -->
        <header class="flex flex-col md:flex-row justify-between items-start md:items-center mb-6 space-y-4 md:space-y-0">
            <h1 class="text-3xl font-extrabold text-teal-400">Euystacio Live Dashboard</h1>
            
            <div id="user-profile" class="flex items-center space-x-3 card p-2.5">
                <div class="text-right">
                    <p id="user-email-display" class="text-sm font-semibold truncate max-w-[150px]">Pioneer Login...</p>
                    <p class="text-xs text-gray-400">ID: <span id="user-id-display" class="font-mono text-[10px]">Awaiting Auth...</span></p>
                </div>
                <button onclick="handleSignOut()" class="bg-red-600 hover:bg-red-700 text-white text-xs px-3 py-1 rounded-full transition duration-200">
                    Sign Out
                </button>
                <div id="pioneer-metrics">
                    <p class="text-xs font-semibold text-teal-300">Bonds: <span id="total-karmabonds">0</span> USD</p>
                    <p class="text-xs text-gray-400">Impact: <span id="personal-impact">0 m³</span></p>
                </div>
            </div>
        </header>

        <!-- AUTHENTICATION CONTAINER (HIDDEN UNTIL AUTH REQUIRED) -->
        <div id="auth-container" class="hidden flex flex-col items-center justify-center min-h-[70vh]">
            <div class="card p-8 w-full max-w-sm">
                <h2 id="auth-title" class="text-2xl font-bold mb-4 text-center">Pioneer Login</h2>
                <p id="auth-error" class="text-red-400 text-sm mb-4 text-center"></p>
                <form id="auth-form" data-mode="login" onsubmit="handleAuthSubmit(event)">
                    <input type="email" name="email" placeholder="Email" required class="w-full p-3 mb-4 rounded-lg bg-[#0d0a13] border border-[#3f3e5e] focus:ring-teal-500 focus:border-teal-500 text-white">
                    <input type="password" name="password" placeholder="Password" required class="w-full p-3 mb-6 rounded-lg bg-[#0d0a13] border border-[#3f3e5e] focus:ring-teal-500 focus:border-teal-500 text-white">
                    <button id="auth-submit" type="submit" class="w-full p-3 bg-teal-600 hover:bg-teal-500 rounded-lg font-bold transition duration-200">Sign In</button>
                </form>
                <p class="mt-4 text-center text-sm">
                    <a href="#" id="auth-toggle-link" onclick="toggleAuthMode(true)" class="text-teal-400 hover:text-teal-300">New Pioneer? Register</a>
                </p>
            </div>
            <div class="mt-6 text-gray-400 text-center">
                <div id="loading-spinner" class="animate-spin rounded-full h-8 w-8 border-b-2 border-teal-500 mx-auto mb-2"></div>
                <span id="loading-text">Authenticating...</span>
            </div>
        </div>

        <!-- MAIN DASHBOARD CONTENT -->
        <div id="dashboard-container" class="hidden">
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <!-- COLUMN 1: Altruism Compass & Investment -->
                <div class="lg:col-span-1 space-y-6">

                    <!-- Altruism Compass (Ethical Sentinel) -->
                    <div class="card p-6">
                        <h2 class="text-xl font-bold mb-3 text-teal-400">The Altruism Compass</h2>
                        <p class="text-sm text-gray-400 mb-4">Ethical Invariant Check ($\text{MATL} \le 10\%$).</p>
                        
                        <div class="bg-[#0d0a13] p-4 rounded-lg flex justify-between items-center mb-4">
                            <div>
                                <p class="text-xs text-gray-500">Current Material Toxicity Level (MATL)</p>
                                <p class="text-3xl font-mono" id="matl-level">6.80%</p>
                            </div>
                            <div class="text-right">
                                <p class="text-xs text-gray-500">Sentinel Status</p>
                                <p id="altruism-compass-status" class="text-teal-400 font-bold">HARMONIC (MATL &le; 10%)</p>
                            </div>
                        </div>

                        <button id="simulate-btn" onclick="simulateCorruptingVector()" class="w-full bg-yellow-600 hover:bg-yellow-500 text-white font-semibold py-2 rounded-lg transition duration-200">
                            Simulate Corrupting Vector
                        </button>
                    </div>

                    <!-- KarmaBond Investment -->
                    <div class="card p-6 relative">
                        <h2 class="text-xl font-bold mb-3 text-teal-400">KarmaBond Investment</h2>
                        <p class="text-sm text-gray-400 mb-4">Cryptographically linked to $\text{m}^3$ Water impact.</p>
                        
                        <input type="number" id="purchase-amount" placeholder="USD Amount (e.g., 100)" min="1" class="w-full p-3 mb-4 rounded-lg bg-[#0d0a13] border border-[#3f3e5e] focus:ring-teal-500 focus:border-teal-500 text-white" required>
                        
                        <button id="purchase-karmabond-btn" onclick="purchaseKarmaBond()" class="w-full bg-teal-600 hover:bg-teal-500 text-white font-bold py-3 rounded-lg transition duration-200">
                            Purchase KarmaBond
                        </button>

                        <!-- Lockout Overlay -->
                        <div id="lockout-overlay" class="lockout-overlay hidden">
                            ⚠️ SYSTEM LOCKOUT ⚠️
                        </div>
                    </div>

                    <!-- Pioneer Profile: Altruism Ledger -->
                    <div class="card p-6">
                        <h2 class="text-xl font-bold mb-3 text-teal-400">My Altruism Ledger</h2>
                        <ul id="altruism-ledger-list" class="space-y-1">
                            <!-- Transactions dynamically loaded here -->
                            <li class="text-center py-4 text-gray-400">Loading ledger...</li>
                        </ul>
                    </div>
                </div>

                <!-- COLUMN 2: 3D Visualization -->
                <div class="lg:col-span-2">
                    <div class="card h-[400px] md:h-[650px] overflow-hidden p-0 relative">
                        <div id="three-scene" class="w-full h-full"></div>
                        <div class="absolute top-4 left-4 p-3 bg-black/70 rounded-lg text-sm">
                            <p class="text-teal-400 font-semibold">Total Altruistic Impact</p>
                            <p class="text-2xl font-mono">1,020,000 $\text{m}^3$ Water</p>
                            <p class="text-xs text-gray-400 mt-1">Click a tower for Data Deep Dive.</p>
                        </div>
                    </div>
                </div>
            </div>

            <div class="mt-6">
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    <!-- COLUMN 3: Tranche Tracker -->
                    <div class="card p-6">
                        <h2 class="text-xl font-bold mb-4 text-teal-400">Unbreakable Promise Tracker</h2>
                        <p class="text-sm text-gray-400 mb-4">Trustless Funding Protocol Tranche Status.</p>
                        <div class="space-y-4">
                            ${tranches.map(t => `
                                <div class="p-3 rounded-lg border border-[#3f3e5e] flex justify-between items-center bg-[#0d0a13]">
                                    <div>
                                        <p class="font-semibold">${t.id}. ${t.name}</p>
                                        <p class="text-xs text-gray-500">Amount: $${t.amount.toLocaleString()}</p>
                                    </div>
                                    <div class="text-right">
                                        <span class="px-3 py-1 text-xs font-bold rounded-full ${t.status === 'RELEASED' ? 'bg-green-600 text-white' : 'bg-yellow-600 text-white'}">
                                            ${t.status}
                                        </span>
                                        <p class="text-xs text-gray-500 mt-1">Proofs: ${t.proofs.join(', ')}</p>
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                    </div>
                    
                    <!-- COLUMN 4: EUS DAO Governance -->
                    <div class="card p-6">
                        <h2 class="text-xl font-bold mb-4 text-teal-400">EUS DAO Governance</h2>
                        <p class="text-sm text-gray-400 mb-4">Vote on proposals to maintain the ethical invariant ($\text{MATL}$).</p>
                        <div id="dao-proposal-list" class="space-y-4">
                            <!-- DAO proposals dynamically loaded here -->
                            <p class="text-center text-gray-400 py-4">Loading active proposals...</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </main>



    
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Euystacio Sacred Dashboard</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.5.4/socket.io.min.js"></script>
    <link rel="stylesheet" href="/static/style.css">
</head>
<body>
    <h1>🌿 Euystacio Covenant Canon</h1>
    <p><strong>SHA-256 Seal:</strong> 4c728e2b86f1e3c988a6d7f02d41b09c5e3f16a7c8e9d24f0c6b1a5e8f4d92a1</p>

    <h2>Milestone Status</h2>
    <ul>
        <li><span class="verified">Tranche 3: Phase 2 Expansion</span></li>
        <li><span class="verified">Tranche 4: Full Completion</span></li>
    </ul>

    <h2>Emergent Cooperative Index</h2>
    <canvas id="cooperativeChart" width="400" height="200"></canvas>

    <h2>AI Core Exchange</h2>
    <input id="userInput" placeholder="Send message to Euystacio..." />
    <button onclick="sendMessage()">Send</button>
    <div id="messages"></div>

    <script src="/static/js/main.js"></script>
</body>
</html>
