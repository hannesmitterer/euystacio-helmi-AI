name: Deploy Euystacio Dashboard

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # Install additional testing dependencies if needed
        pip install pytest flask-testing
    
    - name: Test imports and basic functionality
      run: |
        python -c "from app import app; print('âœ“ App import successful')"
        python -c "from core.red_code import RED_CODE; print('âœ“ Red code loaded')"
        python -c "from sentimento_pulse_interface import SentimentoPulseInterface; print('âœ“ SPI loaded')"
        python -c "from tutor_nomination import TutorNomination; print('âœ“ Tutor nomination loaded')"
    
    - name: Run Flask app health check
      run: |
        python -c "
        from app import app
        import requests
        import threading
        import time
        
        # Start app in background
        def run_app():
            app.run(host='127.0.0.1', port=5001, debug=False)
        
        thread = threading.Thread(target=run_app, daemon=True)
        thread.start()
        time.sleep(3)  # Give server time to start
        
        try:
            response = requests.get('http://127.0.0.1:5001/api/red_code', timeout=5)
            if response.status_code == 200:
                print('âœ“ API endpoint test passed')
            else:
                print('âœ— API endpoint test failed')
                exit(1)
        except Exception as e:
            print(f'âœ— Health check failed: {e}')
            exit(1)
        " &
        sleep 5

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # Install production dependencies
        pip install gunicorn
    
    - name: Prepare deployment artifacts
      run: |
        # Create deployment package
        mkdir -p deploy
        cp -r templates static core *.py requirements.txt deploy/
        cd deploy
        
        # Create Procfile for Heroku-style deployment
        echo "web: gunicorn app:app --bind 0.0.0.0:\$PORT" > Procfile
        
        # Create production requirements
        echo "flask" > requirements-prod.txt
        echo "gunicorn" >> requirements-prod.txt
        
        # Verify structure
        ls -la
    
    # Uncomment and configure for your specific deployment target
    # Example for Heroku:
    # - name: Deploy to Heroku
    #   uses: akhileshns/heroku-deploy@v3.12.14
    #   with:
    #     heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
    #     heroku_app_name: "euystacio-dashboard"
    #     heroku_email: "your-email@example.com"
    
    # Example for Digital Ocean App Platform:
    # - name: Deploy to Digital Ocean
    #   uses: digitalocean/app_action@v1.1.5
    #   with:
    #     app_name: euystacio-dashboard
    #     token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
    - name: Deployment Summary
      run: |
        echo "ðŸŒ³ Euystacio Dashboard deployment completed!"
        echo "Dashboard components verified and ready for production."
        echo "Remember to configure firewall settings as per DEPLOYMENT.md"