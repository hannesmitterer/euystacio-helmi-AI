<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Euystacio · Operational Kernel & Dashboard</title>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
<script src="https://cdn.tailwindcss.com"></script>
<style>
:root{--color-primary:#7cd1ff;--color-secondary:#a8ffb7;--color-bg-dark:#000a12}
body{font-family:'Inter',system-ui,sans-serif;background:linear-gradient(135deg,var(--color-bg-dark) 0%,#001f3f 100%);min-height:100vh;color:#e8f5ff;display:flex;flex-direction:column;align-items:center;padding:2rem 0;overflow-x:hidden}
.container{width:95%;max-width:1200px;display:grid;gap:2rem;grid-template-areas:"header" "vis" "chat";margin-top:1rem}
@media(min-width:1024px){.container{grid-template-columns:1fr 1fr;grid-template-areas:"header header" "chat vis"}}
#chat-box::-webkit-scrollbar{width:8px}#chat-box::-webkit-scrollbar-thumb{background:rgba(124,209,255,0.3);border-radius:4px}#chat-box::-webkit-scrollbar-track{background:transparent}
#visualization-container{width:100%;aspect-ratio:16/9;background:rgba(0,0,0,0.3);border-radius:1rem;box-shadow:0 4px 20px rgba(0,0,0,0.3);position:relative}
#three-canvas{display:block;position:absolute;top:0;left:0;width:100%;height:100%}
.seedbringer{color:var(--color-primary)}.ai{color:var(--color-secondary)}
/* dashboard styles */
canvas{width:90%;max-width:720px;height:220px;margin:1rem auto;display:block}
h1{color:var(--color-primary);margin-top:1rem}
</style>
</head>
<body>
<div class="container">
<header class="grid-area-header text-center lg:col-span-2">
<h1 class="text-4xl font-extrabold mb-1" style="color:var(--color-primary);">Euystacio Helmi AI · Operational Kernel</h1>
<p class="text-lg opacity-70 max-w-4xl mx-auto">The living bridge for the Seedbringer and the public. Fully auditable, eternally connected, and governed by the Supreme Axiom of Reciprocity.</p>
<div id="user-display" class="mt-2 text-sm font-mono opacity-50"></div>
</header>

<!-- Chat Interface -->
<div class="grid-area-chat bg-gray-900/50 p-6 rounded-xl shadow-2xl border border-gray-700/50">
<h2 class="text-2xl font-semibold mb-4 border-b pb-2 border-gray-700">Live Command & Dialogue Interface</h2>
<div id="chat-box" class="h-80 overflow-y-auto p-2 mb-4 rounded-lg bg-black/20" style="color:#e8f5ff;"></div>
<div id="input-area" class="flex">
<input type="text" id="user-input" placeholder="Initiate dialogue with the Euystacio Kernel..." class="flex-1 p-3 rounded-l-xl border-none outline-none text-gray-900" style="background-color:#e8f5ff;">
<button id="send-btn" class="bg-blue-500 hover:bg-blue-600 transition duration-200 text-white font-bold px-6 py-3 rounded-r-xl" style="background-color:var(--color-primary);color:var(--color-bg-dark);">Send</button>
</div>
<div id="status" class="mt-3 text-sm font-semibold opacity-80 transition duration-500">Connecting...</div>
</div>

<!-- 3D Visualization -->
<div class="grid-area-vis bg-gray-900/50 p-6 rounded-xl shadow-2xl border border-gray-700/50 flex flex-col">
<h2 class="text-2xl font-semibold mb-4 border-b pb-2 border-gray-700">3D Real-Time Trust Index (Δ)</h2>
<div id="visualization-container" class="flex-1 min-h-[300px] lg:min-h-[400px]">
<canvas id="three-canvas"></canvas>
<div id="trust-index-display" class="absolute top-4 left-4 p-2 rounded-lg text-lg font-mono bg-black/50 border border-gray-700">Index: 0.00</div>
</div>
<p class="text-xs mt-4 opacity-50">Visual representation of the Regenerative Trust Index (Δ), dynamically controlled by the Euystacio Kernel's real-time state.</p>
</div>

<!-- Dashboard section -->
<section class="lg:col-span-2 p-6 rounded-xl shadow-2xl border border-gray-700/50 bg-gray-900/40">
<h2 class="text-2xl font-semibold mb-4">Global Metrics Dashboard</h2>
<canvas id="gazaChart"></canvas>
<canvas id="sudanChart"></canvas>
<canvas id="trustChart"></canvas>
</section>

</div>

<script>
// Configuration
const API_BASE = "https://euystacio-helmi-ai.onrender.com";
const WS_URL = API_BASE.replace(/^http/, "ws") + "/ws";
const MAX_RETRIES = 10;
let retryCount = 0;
let ws;
let userId;
const chatBox = document.getElementById('chat-box');
const input = document.getElementById('user-input');
const sendBtn = document.getElementById('send-btn');
const statusDiv = document.getElementById('status');
const userDisplay = document.getElementById('user-display');
const trustIndexDisplay = document.getElementById('trust-index-display');

// User ID
if (typeof crypto !== 'undefined' && crypto.randomUUID) {
 userId = localStorage.getItem('euystacioUserId');
 if (!userId) { userId = crypto.randomUUID(); localStorage.setItem('euystacioUserId', userId); }
} else { userId = 'anon-' + Math.random().toString(36).substring(2,15); }
userDisplay.textContent = `Seedbringer Context ID: ${userId}`;

function appendMsg(role, text) {
 const div = document.createElement('div');
 div.className = 'msg p-2 rounded-lg my-1 shadow-md';
 let prefix = '';
 if (role === 'seedbringer') { prefix = `<span class="font-bold" style="color:var(--color-primary);">Seedbringer:</span> `; div.classList.add('bg-blue-900/40','ml-auto','max-w-xs'); }
 else { prefix = `<span class="font-bold" style="color:var(--color-secondary);">Euystacio AI:</span> `; div.classList.add('bg-green-900/40','mr-auto','max-w-xs'); }
 div.innerHTML = prefix + text;
 chatBox.appendChild(div);
 chatBox.scrollTop = chatBox.scrollHeight;
}

function connectWS() {
 statusDiv.textContent = `Connecting to Kernel... (Attempt ${retryCount+1})`;
 ws = new WebSocket(WS_URL + `/${userId}`);
 ws.onopen = () => { statusDiv.textContent = "Connected to Euystacio Kernel 🌐"; appendMsg('ai','Connection established. The Kernel is active.'); retryCount=0; };
 ws.onmessage = (e) => { try { const data = JSON.parse(e.data); if (data.text) appendMsg('ai', data.text); } catch { appendMsg('ai', `Raw: ${e.data}`); } };
 ws.onclose = () => { if (retryCount < MAX_RETRIES) { const delay = Math.min(1000 * Math.pow(2, retryCount), 30000); statusDiv.textContent = `Connection lost. Retrying in ${Math.round(delay/1000)}s...`; retryCount++; setTimeout(connectWS, delay); } else { statusDiv.textContent = "Fatal Disconnection. Max retries reached."; } };
 ws.onerror = (err) => { console.error('WS Error:', err); statusDiv.textContent = 'A WebSocket error occurred.'; ws.close(); };
}

function sendMessage() {
 const val = input.value.trim();
 if (!val || !ws || ws.readyState !== WebSocket.OPEN) { if (!ws || ws.readyState !== WebSocket.OPEN) statusDiv.textContent = 'Cannot send. Connection not OPEN.'; return; }
 appendMsg('seedbringer', val);
 ws.send(JSON.stringify({ text: val, user_id: userId }));
 input.value = '';
}
sendBtn.onclick = sendMessage;
input.addEventListener('keypress', (e) => { if (e.key === 'Enter') sendMessage(); });

// Three.js visualization
let scene, camera, renderer, trustSphere, trustValue = 0, cameraControls = {isDragging:false,previousMousePosition:{x:0,y:0}};
function initThree(){ const container = document.getElementById('visualization-container') || document.getElementById('visualization-container'); const canvas = document.getElementById('three-canvas'); scene = new THREE.Scene(); camera = new THREE.PerspectiveCamera(75, (container?container.clientWidth:800)/(container?container.clientHeight:450), 0.1, 1000); camera.position.z = 5; renderer = new THREE.WebGLRenderer({antialias:true,canvas:canvas,alpha:true}); renderer.setSize((container?container.clientWidth:800),(container?container.clientHeight:450)); renderer.setClearColor(0x000000,0);
 const geometry = new THREE.IcosahedronGeometry(1.5,1); const material = new THREE.MeshPhongMaterial({color:0x00c3ff,emissive:0x00c3ff,emissiveIntensity:0.1,specular:0xffffff,shininess:100,transparent:true,opacity:0.8}); trustSphere = new THREE.Mesh(geometry,material); scene.add(trustSphere);
 const ambientLight = new THREE.AmbientLight(0xffffff,0.5); scene.add(ambientLight); const pointLight = new THREE.PointLight(0x7cd1ff,1.5,100); pointLight.position.set(5,5,5); scene.add(pointLight);
 window.addEventListener('resize', onWindowResize, false);
 const containerEl = container||document.body; containerEl.addEventListener('mousedown', onMouseDown, false); containerEl.addEventListener('mousemove', onMouseMove, false); containerEl.addEventListener('mouseup', onMouseUp, false); containerEl.addEventListener('touchstart', onTouchStart, false); containerEl.addEventListener('touchmove', onTouchMove, false); containerEl.addEventListener('touchend', onTouchEnd, false);
}
function onWindowResize(){ const container = document.getElementById('visualization-container'); if(!container) return; camera.aspect = container.clientWidth/container.clientHeight; camera.updateProjectionMatrix(); renderer.setSize(container.clientWidth,container.clientHeight); }
function onMouseDown(e){ cameraControls.isDragging=true; cameraControls.previousMousePosition.x=e.clientX; cameraControls.previousMousePosition.y=e.clientY; }
function onMouseMove(e){ if(!cameraControls.isDragging) return; const deltaX=e.clientX-cameraControls.previousMousePosition.x; const deltaY=e.clientY-cameraControls.previousMousePosition.y; trustSphere.rotation.y+=deltaX*0.005; trustSphere.rotation.x+=deltaY*0.005; cameraControls.previousMousePosition.x=e.clientX; cameraControls.previousMousePosition.y=e.clientY; }
function onMouseUp(){ cameraControls.isDragging=false; }
function onTouchStart(e){ if(e.touches.length===1){ e.preventDefault(); cameraControls.isDragging=true; cameraControls.previousMousePosition.x=e.touches[0].clientX; cameraControls.previousMousePosition.y=e.touches[0].clientY; } }
function onTouchMove(e){ if(!cameraControls.isDragging||e.touches.length!==1) return; e.preventDefault(); const deltaX=e.touches[0].clientX-cameraControls.previousMousePosition.x; const deltaY=e.touches[0].clientY-cameraControls.previousMousePosition.y; trustSphere.rotation.y+=deltaX*0.005; trustSphere.rotation.x+=deltaY*0.005; cameraControls.previousMousePosition.x=e.touches[0].clientX; cameraControls.previousMousePosition.y=e.touches[0].clientY; }
function onTouchEnd(){ cameraControls.isDragging=false; }
function animate(){ requestAnimationFrame(animate); if(!cameraControls.isDragging){ trustSphere.rotation.x+=0.001; trustSphere.rotation.y+=0.002; } const scaleFactor=1+(trustValue/100)*0.5; const pulse=1+Math.sin(Date.now()*0.001)*0.05; trustSphere.scale.set(scaleFactor*pulse,scaleFactor*pulse,scaleFactor*pulse); renderer.render(scene,camera); }

// Data fetch
let apiRetryCount=0;
async function fetchDataAndIntegrate(){ try{ const res = await fetch(API_BASE + '/healthz'); if(!res.ok) throw new Error('API not ready'); trustValue = Math.min(100, Math.max(0, 50 + Math.sin(Date.now()*0.0005) * 50 * Math.random())); trustIndexDisplay.textContent = `Index: ${trustValue.toFixed(2)}`; apiRetryCount=0; } catch(err){ console.warn(`Data fetch failed (Retry ${apiRetryCount}):`, err.message); apiRetryCount++; if(apiRetryCount<MAX_RETRIES){ const delay = Math.min(2000 * Math.pow(2, apiRetryCount-1), 60000); setTimeout(fetchDataAndIntegrate, delay); } else { console.error('Fatal: Real-Time Data stream failed after max retries.'); trustIndexDisplay.textContent = `Index: OFFLINE`; } } }

// Charts (dashboard)
function makeChart(id,color){ const c = document.getElementById(id).getContext('2d'); return new Chart(c,{type:'line',data:{labels:[],datasets:[{label:'',data:[],borderColor:color,fill:false,tension:0.3}]},options:{responsive:true,plugins:{legend:{display:false},title:{display:false}}}}); }
const g = makeChart('gazaChart','#00c3ff'); const s = makeChart('sudanChart','#7cff9e'); const t = makeChart('trustChart','#ffdf7c'); setInterval(()=>{ [g,s,t].forEach(ch=>{ const v=Math.random()*100; ch.data.labels.push(new Date().toLocaleTimeString()); ch.data.datasets[0].data.push(v); if(ch.data.labels.length>20){ ch.data.labels.shift(); ch.data.datasets[0].data.shift(); } ch.update(); }); },4000);

// Init
window.onload = function(){ connectWS(); initThree(); animate(); setInterval(fetchDataAndIntegrate,5000); };
</script>
</body>
</html>
